MISSÃO 04 - VALOR 0,50 na AC

Analogias: 
 - Regressão Linear: Resume tendência dos dados. Trabalha PREVISÕES e Probabilidades (SciKitLearn - LinearRegression)
 - KNN (K-Nearest Neighbors): Vizinhança. Para decidir Olhaamos para seus vizinhos mais próximos para ele compreender por proximidade. (SciKitLearn - DecisionTreeClassifier)
 - Árvores de Decisão: Trabalha fluxo de decisão. O algoritmo aprende a fazer uma série de perguntas de "sim/não" para chegar a uma conclusão. (SciKitLearn -KNeighborsClassifier)


REGRESSÃO LINEAR:
Se você tem um conjunto de pontos em um gráfico, a Regressão Linear tenta encontrar a melhor linha reta que passa por esses pontos, resumindo a tendência geral.
O objetivo é prever um valor numérico contínuo. Por exemplo, prever o preço de uma casa com base na sua área, ou a nota de um aluno com base nas horas de estudo.
A linha que o modelo 'aprende' nos permite fazer previsões para novos dados.

#EXERCICIO 01
print("Regressão Linear (Prever Gorjeta) ---")
import numpy as np
from sklearn.linear_model import LinearRegression

# X: Característica (Feature) -> Valor da conta em R$
# Precisamos formatar como uma matriz 2D, por isso o .reshape(-1, 1)
X_contas = np.array([10, 20, 30, 45, 50, 65, 70, 80]).reshape(-1, 1)

# y: Rótulo (Label) -> Valor da gorjeta em R$
y_gorjetas = np.array([1.5, 3.0, 4.0, 6.0, 7.5, 9.0, 10.0, 12.0])

# 1. Criar o modelo de Regressão Linear
modelo_gorjeta = LinearRegression()

# 2. Treinar o modelo com nossos dados
# O .fit() encontra a melhor linha que descreve a relação entre X e y
modelo_gorjeta.fit(X_contas, y_gorjetas)

# 3. Fazer uma previsão para um novo valor
# Qual seria a gorjeta para uma conta de R$ 55?
nova_conta = np.array([[55]]) # Precisa ser um array 2D
gorjeta_prevista = modelo_gorjeta.predict(nova_conta)

print(f"Dados das contas (X):\n{X_contas.flatten()}")
print(f"Dados das gorjetas (y):\n{y_gorjetas}")
print("-" * 20)
print(f"Para uma conta de R$ 55.00, a gorjeta prevista é: R$ {gorjeta_prevista[0]:.2f}")


#EXERCICIO 02
Exercício: Prever Pontuação em Jogo
Sua Tarefa: Crie um modelo que prevê a pontuação final de um jogador com base no número de horas que ele jogou.

# EXERCÍCIO - PREVER PONTUAÇÃO EM JOGO
print("\n--- 1.2: Exercício - Prever Pontuação ---")
# X: Horas jogadas
horas_jogadas = np.array([1, 3, 5, 8, 10]).reshape(-1, 1)
# y: Pontuação final (em milhares)
pontuacao_final = np.array([10, 25, 60, 90, 110])

# TODO: Crie uma instância do modelo LinearRegression.
# modelo_pontuacao = ???

# TODO: Treine o modelo com os dados de horas jogadas e pontuação.
# ???.fit(???, ???)

# TODO: Preveja a pontuação para um jogador que jogou por 7 horas.
# horas_novas = np.array([[7]])
# pontuacao_prevista = ???.predict(???)

# print(f"Para 7 horas jogadas, a pontuação prevista é de {pontuacao_prevista[0]:.0f} mil pontos.")


#EXERCICIO 03
Sua Tarefa: Você tem dados da temperatura em uma cidade com base na altitude (em metros). Crie um modelo para prever a temperatura a 2500 metros.
#EXERCÍCIO - PREVER TEMPERATURA
print("\n--- 1.3: Exercício - Prever Temperatura ---")
# X: Altitude em metros
altitudes = np.array([500, 1000, 1500, 2000, 3000]).reshape(-1, 1)
# y: Temperatura em Celsius
temperaturas = np.array([25, 20, 15, 10, 5])

# TODO: Crie e treine um modelo de Regressão Linear com estes dados.
# modelo_temp = ???
# modelo_temp.fit(???, ???)

# TODO: Faça a previsão da temperatura para uma altitude de 2500 metros.
# altitude_nova = np.array([[2500]])
# temp_prevista = ???.predict(???)




K-Nearest Neighbors (KNN)
Árvore de Decisão. Pensem nela como um fluxograma ou o jogo 'Cara a Cara'. O modelo aprende uma série de perguntas de 'sim' ou 'não' para chegar a uma decisão.
A maior vantagem das Árvores de Decisão é a interpretabilidade. Nós podemos literalmente ver as 'regras' que o modelo aprendeu. Elas são excelentes para entender por que uma decisão foi tomada.

Exemplo: Decidir se Vai Jogar

# EXEMPLO  ÁRVORES DE DECISÃO
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

print("\n--- 3.1: Exemplo - Árvore de Decisão (Jogar ou não?) ---")

# X: [Tempo (0=Sol, 1=Nublado, 2=Chuva), Umidade (0=Normal, 1=Alta)]
X_clima = np.array([[0, 0], [0, 1], [1, 0], [2, 0], [2, 1], [1, 1]])
# y: 0=Não Joga, 1=Joga
y_decisao = np.array([1, 0, 1, 1, 0, 0])

# 1. Criar e treinar o modelo
modelo_arvore = DecisionTreeClassifier(random_state=42)
modelo_arvore.fit(X_clima, y_decisao)

# 2. Fazer uma previsão: Tempo=Sol (0), Umidade=Normal (0)
previsao_clima = modelo_arvore.predict(np.array([[0, 0]]))
resultado_clima = "Joga" if previsao_clima[0] == 1 else "Não Joga"
print(f"Para um dia de Sol e Umidade Normal, a decisão é: {resultado_clima}")

# 3. Visualizar a árvore (a parte mais legal!)
plt.figure(figsize=(8, 6))
plot_tree(modelo_arvore, feature_names=['Tempo', 'Umidade'], class_names=['Não Joga', 'Joga'], filled=True)
plt.title("Árvore de Decisão para Jogar")
plt.show()


Para problemas de classificação. A classe que aparecer mais vezes entre esses vizinhos (o voto da maioria) será a previsão para o novo dado.
Exemplo: Classificar Frutas
#  EXEMPLO  - KNN

from sklearn.neighbors import KNeighborsClassifier

print("\n- KNN (Classificar Frutas) ---")

# X: [peso em gramas, textura (0=lisa, 1=cascuda)]
X_frutas = np.array([
    [150, 0], [170, 0], [180, 0], # Maçãs
    [130, 1], [120, 1], [140, 1]  # Laranjas
])
# y: 0=Laranja, 1=Maçã
y_frutas = np.array([1, 1, 1, 0, 0, 0])

# 1. Criar o modelo KNN
# n_neighbors=3 significa que ele vai consultar os 3 vizinhos mais próximos.
modelo_frutas = KNeighborsClassifier(n_neighbors=3)

# 2. Treinar o modelo
modelo_frutas.fit(X_frutas, y_frutas)

# 3. Fazer uma previsão para uma nova fruta: 160g e textura lisa (0)
fruta_nova = np.array([[160, 0]])
previsao = modelo_frutas.predict(fruta_nova)

# Traduzindo a previsão numérica para texto
resultado = "Maçã" if previsao[0] == 1 else "Laranja"
print(f"Dados das Frutas:\n{X_frutas}")
print(f"Rótulos: {y_frutas}")
print("-" * 20)
print(f"Uma fruta de [160g, lisa] foi classificada como: {resultado}")


#EXERCICIO 04
Sua Tarefa: Crie um modelo KNN que classifica se um aluno foi aprovado (1) ou reprovado (0) com base em duas notas.

# EXERCÍCIO - APROVADO OU REPROVADO?
print("\n--- 2.2: Exercício - Aprovado/Reprovado ---")
# X: [nota_prova_1, nota_prova_2]
notas_alunos = np.array([[8, 7], [5, 4], [9, 8], [4, 2], [7, 9], [3, 5]])
# y: 0=Reprovado, 1=Aprovado
situacao = np.array([1, 0, 1, 0, 1, 0])

# TODO: Crie uma instância do modelo KNeighborsClassifier com 3 vizinhos.
# modelo_alunos = ???

# TODO: Treine o modelo com os dados dos alunos.
# ???.fit(???, ???)

# TODO: Preveja a situação de um aluno com notas 6 e 7.
# aluno_novo = np.array([[6, 7]])
# previsao_aluno = ???.predict(???)

# resultado_aluno = "Aprovado" if previsao_aluno[0] == 1 else "Reprovado"
# print(f"Um aluno com notas [6, 7] foi classificado como: {resultado_aluno}")


Exercício para Alunos: Classificar Veículo
Sua Tarefa: Crie um modelo KNN para classificar um veículo como 'Carro', 'Moto' ou 'Caminhão' com base no seu peso (em kg) e número de rodas.

# PARTE 2.3: EXERCÍCIO - CLASSIFICAR VEÍCULO
print("\n--Exercício - Classificar Veículo ---")
# X: [peso_kg, numero_rodas]
dados_veiculos = np.array([[150, 2], [1500, 4], [8000, 6], [180, 2], [2000, 4], [10000, 8]])
# y: 0=Moto, 1=Carro, 2=Caminhão
tipo_veiculo = np.array([0, 1, 2, 0, 1, 2])

# TODO: Crie e treine um modelo KNN com 3 vizinhos para estes dados.
# modelo_veiculo = ???
# ???.fit(???, ???)

# TODO: Preveja o tipo de um veículo com 1800 kg e 4 rodas.
# veiculo_novo = np.array([[1800, 4]])
# previsao_veiculo = ???.predict(???)

# mapa_veiculos = {0: 'Moto', 1: 'Carro', 2: 'Caminhão'}
# resultado_veiculo = mapa_veiculos[previsao_veiculo[0]]
# print(f"Um veículo de [1800 kg, 4 rodas] foi classificado como: {resultado_veiculo}")


KNN (K-Nearest Neighbors):
Intuição: Mostre um gráfico com pontos de duas cores (duas classes). Adicione um ponto novo (cinza) e pergunte: "a qual grupo ele pertence?". Desenhe um círculo ao redor dele para encontrar os k vizinhos mais próximos e conte os votos.
Quando usar: Para problemas de classificação. É simples e poderoso, especialmente quando a fronteira entre as classes não é linear.

Explicação:
Para classificar um novo dado, o KNN olha para os 'K' vizinhos mais próximos a ele nos dados de treino.
A classe que aparecer mais vezes entre esses vizinhos (o voto da maioria) será a previsão para o novo dado. É um algoritmo democrático!

Exemplo: Classificar Frutas
#  EXEMPLO  - KNN

from sklearn.neighbors import KNeighborsClassifier

print("\n- KNN (Classificar Frutas) ---")

# X: [peso em gramas, textura (0=lisa, 1=cascuda)]
X_frutas = np.array([
    [150, 0], [170, 0], [180, 0], # Maçãs
    [130, 1], [120, 1], [140, 1]  # Laranjas
])
# y: 0=Laranja, 1=Maçã
y_frutas = np.array([1, 1, 1, 0, 0, 0])

# 1. Criar o modelo KNN
# n_neighbors=3 significa que ele vai consultar os 3 vizinhos mais próximos.
modelo_frutas = KNeighborsClassifier(n_neighbors=3)

# 2. Treinar o modelo
modelo_frutas.fit(X_frutas, y_frutas)

# 3. Fazer uma previsão para uma nova fruta: 160g e textura lisa (0)
fruta_nova = np.array([[160, 0]])
previsao = modelo_frutas.predict(fruta_nova)

# Traduzindo a previsão numérica para texto
resultado = "Maçã" if previsao[0] == 1 else "Laranja"
print(f"Dados das Frutas:\n{X_frutas}")
print(f"Rótulos: {y_frutas}")
print("-" * 20)
print(f"Uma fruta de [160g, lisa] foi classificada como: {resultado}")

Árvores de Decisão
Exemplo: Decidir se Vai Jogar

# EXEMPLO  ÁRVORES DE DECISÃO
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

print("\n--- 3.1: Exemplo - Árvore de Decisão (Jogar ou não?) ---")

# X: [Tempo (0=Sol, 1=Nublado, 2=Chuva), Umidade (0=Normal, 1=Alta)]
X_clima = np.array([[0, 0], [0, 1], [1, 0], [2, 0], [2, 1], [1, 1]])
# y: 0=Não Joga, 1=Joga
y_decisao = np.array([1, 0, 1, 1, 0, 0])

# 1. Criar e treinar o modelo
modelo_arvore = DecisionTreeClassifier(random_state=42)
modelo_arvore.fit(X_clima, y_decisao)

# 2. Fazer uma previsão: Tempo=Sol (0), Umidade=Normal (0)
previsao_clima = modelo_arvore.predict(np.array([[0, 0]]))
resultado_clima = "Joga" if previsao_clima[0] == 1 else "Não Joga"
print(f"Para um dia de Sol e Umidade Normal, a decisão é: {resultado_clima}")

# 3. Visualizar a árvore (a parte mais legal!)
plt.figure(figsize=(8, 6))
plot_tree(modelo_arvore, feature_names=['Tempo', 'Umidade'], class_names=['Não Joga', 'Joga'], filled=True)
plt.title("Árvore de Decisão para Jogar")
plt.show()


#EXERCICIO 05
Sua Tarefa: Crie uma árvore de decisão para aprovar (1) ou negar (0) um empréstimo com base na renda anual (em milhares) e se a pessoa possui casa própria (1=Sim, 0=Não).
# EXERCÍCIO - APROVAR EMPRÉSTIMO
print("\n--- 3.2: Exercício - Aprovar Empréstimo ---")
# X: [renda_anual_milhar, casa_propria]
dados_credito = np.array([[50, 1], [30, 0], [80, 1], [40, 0], [120, 1], [70, 0]])
# y: 0=Negado, 1=Aprovado
decisao_credito = np.array([1, 0, 1, 0, 1, 1])

# TODO: Crie e treine um modelo DecisionTreeClassifier.
# modelo_credito = ???
# ???.fit(???, ???)

# TODO: Preveja a decisão para alguém com renda de 90 mil e casa própria.
# novo_cliente = np.array([[90, 1]])
# previsao_credito = ???.predict(???)

# resultado_credito = "Aprovado" if previsao_credito[0] == 1 else "Negado"
# print(f"Decisão para o cliente [R$90k, Casa Própria]: {resultado_credito}")

# TODO (Opcional): Plote a árvore de decisão para este modelo.


#EXERCICIO 06
Sua Tarefa: Crie uma árvore de decisão para diagnosticar se um paciente tem 'Gripe' ou 'Resfriado' com base na febre e na intensidade da tosse.
#EXERCÍCIO - DIAGNÓSTICO MÉDICO
print("\n--- 3.3: Exercício - Diagnóstico Médico ---")
# X: [febre (0=Não, 1=Sim), tosse (0=Leve, 1=Forte)]
sintomas = np.array([[1, 1], [0, 0], [1, 0], [0, 1], [1, 1], [0, 0]])
# y: 0=Resfriado, 1=Gripe
diagnostico = np.array([1, 0, 0, 0, 1, 0])

# TODO: Crie e treine um modelo de árvore de decisão.
# modelo_saude = ???
# ???.fit(???, ???)

# TODO: Preveja o diagnóstico para um paciente com febre (1) e tosse leve (0).
# novo_paciente = np.array([[1, 0]])
# previsao_saude = ???.predict(???)

# mapa_diagnostico = {0: 'Resfriado', 1: 'Gripe'}
# resultado_saude = mapa_diagnostico[previsao_saude[0]]
# print(f"Diagnóstico para [Febre=Sim, Tosse=Leve]: {resultado_saude}")

# print(f"A temperatura prevista a 2500 metros é de {temp_prevista[0]:.1f}°C.")
















